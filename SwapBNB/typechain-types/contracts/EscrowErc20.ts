/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EscrowErc20Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "borrower"
      | "claimedAmount"
      | "claimedSteps"
      | "fund"
      | "lender"
      | "loan"
      | "lockedAt"
      | "steps"
      | "token"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "borrower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedSteps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lender", values?: undefined): string;
  encodeFunctionData(functionFragment: "loan", values?: undefined): string;
  encodeFunctionData(functionFragment: "lockedAt", values?: undefined): string;
  encodeFunctionData(functionFragment: "steps", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "borrower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedSteps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockedAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "steps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface EscrowErc20 extends BaseContract {
  connect(runner?: ContractRunner | null): EscrowErc20;
  waitForDeployment(): Promise<this>;

  interface: EscrowErc20Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  borrower: TypedContractMethod<[], [string], "view">;

  claimedAmount: TypedContractMethod<[], [bigint], "view">;

  claimedSteps: TypedContractMethod<[], [bigint], "view">;

  fund: TypedContractMethod<
    [
      _token: AddressLike,
      _borrower: AddressLike,
      _loan: BigNumberish,
      _steps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  lender: TypedContractMethod<[], [string], "view">;

  loan: TypedContractMethod<[], [bigint], "view">;

  lockedAt: TypedContractMethod<[], [bigint], "view">;

  steps: TypedContractMethod<[], [bigint], "view">;

  token: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "borrower"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimedSteps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fund"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _borrower: AddressLike,
      _loan: BigNumberish,
      _steps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lender"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "loan"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockedAt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "steps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
